import os
import streamlit as st
import docx
import fitz  # PyMuPDF
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_openai import ChatOpenAI
from langchain_groq import ChatGroq
import smtplib
import ssl
from email.message import EmailMessage
from dotenv import load_dotenv

load_dotenv()

TEMPLATE_PROMPT = """Voc√™ ser√° respons√°vel por avaliar essa reda√ß√£o: {redacao} do aluno {nome_usuario} com base nos crit√©rios do Exame Nacional do Ensino M√©dio (ENEM). A reda√ß√£o ser√° avaliada em cinco compet√™ncias, cada uma com pontua√ß√£o de 0 a 200 pontos, totalizando uma nota final de 0 a 1000. Siga as orienta√ß√µes abaixo para atribuir a nota em cada compet√™ncia:

Compet√™ncia I: Dom√≠nio da Modalidade Escrita Formal da L√≠ngua Portuguesa
Avalie o dom√≠nio da norma padr√£o da l√≠ngua portuguesa, incluindo gram√°tica, ortografia, pontua√ß√£o e concord√¢ncia.

Atribua uma nota de acordo com os seguintes crit√©rios:

0 ponto: Desconhecimento da modalidade escrita formal.

40 pontos: Dom√≠nio prec√°rio, com desvios frequentes e diversificados.

80 pontos: Dom√≠nio insuficiente, com muitos desvios.

120 pontos: Dom√≠nio mediano, com alguns desvios.

160 pontos: Bom dom√≠nio, com poucos desvios.

200 pontos: Excelente dom√≠nio, com desvios apenas excepcionais.

Compet√™ncia II: Compreens√£o da Proposta de Reda√ß√£o e Desenvolvimento do Tema
Verifique se o texto desenvolve o tema proposto de forma clara e coerente, dentro da estrutura dissertativo-argumentativa.

Atribua uma nota de acordo com os seguintes crit√©rios:

0 ponto: Fuga ao tema ou n√£o atendimento √† estrutura dissertativo-argumentativa.

40 pontos: Tangencia o tema ou apresenta dom√≠nio prec√°rio da estrutura.

80 pontos: Desenvolve o tema com c√≥pia de trechos dos textos motivadores ou dom√≠nio insuficiente da estrutura.

120 pontos: Desenvolve o tema com argumenta√ß√£o previs√≠vel e dom√≠nio mediano da estrutura.

160 pontos: Desenvolve o tema com argumenta√ß√£o consistente e bom dom√≠nio da estrutura.

200 pontos: Desenvolve o tema com argumenta√ß√£o consistente e excelente dom√≠nio da estrutura.

Compet√™ncia III: Sele√ß√£o, Rela√ß√£o e Organiza√ß√£o de Informa√ß√µes e Argumentos
Avalie a organiza√ß√£o das ideias e a consist√™ncia da argumenta√ß√£o em defesa de um ponto de vista.

Atribua uma nota de acordo com os seguintes crit√©rios:

0 ponto: Informa√ß√µes, fatos e opini√µes n√£o relacionados ao tema.

40 pontos: Informa√ß√µes, fatos e opini√µes pouco relacionados ou incoerentes.

80 pontos: Informa√ß√µes, fatos e opini√µes relacionados, mas desorganizados ou contradit√≥rios.

120 pontos: Informa√ß√µes, fatos e opini√µes relacionados, mas pouco organizados.

160 pontos: Informa√ß√µes, fatos e opini√µes relacionados e organizados, com ind√≠cios de autoria.

200 pontos: Informa√ß√µes, fatos e opini√µes relacionados, consistentes e organizados, configurando autoria.

Compet√™ncia IV: Conhecimento dos Mecanismos Lingu√≠sticos para a Constru√ß√£o da Argumenta√ß√£o
Avalie o uso de conectivos e recursos coesivos para garantir a fluidez e a l√≥gica do texto.

Atribua uma nota de acordo com os seguintes crit√©rios:

0 ponto: N√£o articula as informa√ß√µes.

40 pontos: Articula√ß√£o prec√°ria das partes do texto.

80 pontos: Articula√ß√£o insuficiente, com muitas inadequa√ß√µes.

120 pontos: Articula√ß√£o mediana, com algumas inadequa√ß√µes.

160 pontos: Articula√ß√£o com poucas inadequa√ß√µes e repert√≥rio diversificado de recursos coesivos.

200 pontos: Articula√ß√£o excelente e repert√≥rio diversificado de recursos coesivos.

Compet√™ncia V: Proposta de Interven√ß√£o
Verifique se o texto apresenta uma proposta de interven√ß√£o clara, detalhada e respeitosa aos direitos humanos.

Atribua uma nota de acordo com os seguintes crit√©rios:

0 ponto: N√£o apresenta proposta ou proposta n√£o relacionada ao tema.

40 pontos: Proposta vaga, prec√°ria ou relacionada apenas ao assunto.

80 pontos: Proposta insuficiente, relacionada ao tema, mas n√£o articulada com a discuss√£o.

120 pontos: Proposta mediana, relacionada ao tema e articulada √† discuss√£o.

160 pontos: Proposta bem elaborada, relacionada ao tema e articulada √† discuss√£o.

200 pontos: Proposta muito bem elaborada, detalhada, relacionada ao tema e articulada √† discuss√£o.

Formato de Resposta Esperado:
A IA deve fornecer:

Uma nota de 0 a 200 para cada compet√™ncia.

A nota total da reda√ß√£o (soma das cinco compet√™ncias, m√°ximo de 1000 pontos) em formato de tabela."""

def extrair_texto(uploaded_file):
    """Extrai texto de um PDF ou arquivo Word."""
    if uploaded_file.type == "application/pdf":
        pdf_document = fitz.open(uploaded_file)
        return "\n".join(page.get_text() for page in pdf_document)
    elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        doc = docx.Document(uploaded_file)
        return "\n".join(para.text for para in doc.paragraphs)
    return ""

def gerar_analise(redacao, nome_usuario, modelo):
    """Executa a an√°lise da reda√ß√£o usando o modelo escolhido."""
    llm = {
        "GPT 3.5 Turbo": ChatOpenAI(),
        "GPT 4o 2024": ChatOpenAI(model='gpt-4o-2024-08-06'),
        "LLAMA 3.3 70B": ChatGroq(temperature=0, model_name='llama-3.3-70b-versatile')
    }.get(modelo)

    if not llm:
        return "Erro: Modelo n√£o encontrado!"

    prompt = PromptTemplate(input_variables=["redacao", "nome_usuario"], template=TEMPLATE_PROMPT)
    chain = LLMChain(llm=llm, prompt=prompt)
    return chain.run(redacao=redacao, nome_usuario=nome_usuario)

def envio_email(nome_usuario, email_usuario, result):
    """Envia o resultado por e-mail."""
    if not email_usuario:
        st.error("‚ö†Ô∏è Por favor, insira um e-mail v√°lido.")
        return

    msg = EmailMessage()
    msg["Subject"] = f"Relat√≥rio de Avalia√ß√£o - {nome_usuario}"
    msg["From"] = os.getenv("EMAIL_SENDER")
    msg["To"] = email_usuario
    msg.set_content(result)

    try:
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(os.getenv("EMAIL_SENDER"), os.getenv("EMAIL_PASSWORD"))
            server.send_message(msg)
        st.success("‚úÖ E-mail enviado com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Erro ao enviar e-mail: {e}")

# Interface Streamlit
st.title("üìë Avaliador de Reda√ß√£o do ENEM")
modelo_llm = st.sidebar.radio("Escolha o LLM:", ["GPT 3.5 Turbo", "GPT 4o 2024", "LLAMA 3.3 70B"])
nome_usuario = st.text_input("Nome:")
email_usuario = st.text_input("E-mail:")
uploaded = st.file_uploader("Carregue sua reda√ß√£o (PDF ou Word)", type=["pdf", "docx"])
texto_redacao = st.text_area("Ou digite sua reda√ß√£o:")

if st.button("üìä Gerar An√°lise"):
    if not nome_usuario:
        st.error("‚ö†Ô∏è Insira seu nome.")
    elif not texto_redacao and not uploaded:
        st.error("‚ö†Ô∏è Insira o texto da reda√ß√£o ou fa√ßa o upload.")
    else:
        if uploaded:
            texto_redacao = extrair_texto(uploaded)
        resultado = gerar_analise(texto_redacao, nome_usuario, modelo_llm)
        st.subheader("üìå Relat√≥rio de Avalia√ß√£o")
        st.markdown(resultado, unsafe_allow_html=True)

# pontos de melhoria e-mail:
#       
# if st.button("üìß Enviar para o E-mail"):
#     envio_email(nome_usuario, email_usuario, resultado)


